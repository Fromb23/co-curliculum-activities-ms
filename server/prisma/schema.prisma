generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Activity {
  id           Int               @id @default(autoincrement())
  name         String            @unique
  description  String?
  location     String            @default("Main Field")
  students     StudentActivity[]
  time         String            @default("No time set")
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  trainerId    Int?
  trainer      Trainer?          @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  schedule     Schedule[]
  comment      Comment[]
  announcement Announcement[]
  report       Report[]
  
  @@index([id, name])
  @@map("activities")
}

model StudentActivity {
  id         Int      @id @default(autoincrement())
  studentId  Int
  activityId Int
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([studentId, activityId])
  @@map("user_activities")
}

model User {
  id        Int       @id @default(autoincrement())
  fullName  String
  email     String    @unique
  phoneNo   String    @unique
  password  String?
  role      ROLE      @default(STUDENT)
  trainer   Trainer?
  student   Student?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([id, email])
  @@map("users")
}

model Trainer {
  id           Int            @id @default(autoincrement())
  nationalIdNo String         @unique
  userId       Int            @unique
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity     Activity[]
  comment      Comment[]
  announcement Announcement[]
  report       Report[]

  @@index([id])
  @@map("trainers")
}

model Student {
  id         Int               @id @default(autoincrement())
  parentName String
  userId     Int               @unique
  attendant  ATTENDANT         @default(PRESENT)
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity   StudentActivity[]
  comment    Comment[]
  report     Report[]

  @@index([id])
  @@map("students")
}

model Schedule {
  id         Int      @id @default(autoincrement())
  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  day        DAY
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([id])
  @@map("schedules")
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String
  studentId Int?     // nullable
  activityId Int
  trainerId Int?     // nullable
  parentId  Int?     // nullable for threading
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  senderType String?
  read       Boolean @default(false)

  student  Student?  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  activity Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  trainer  Trainer?  @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  @@index([trainerId, activityId, studentId])
  @@index([parentId])
  @@map("comments")
}



model Announcement {
  id           Int                 @id @default(autoincrement())
  title        String
  announcement String
  activityId   Int
  trainerId    Int
  urgent       AnnouncementUrgency @default(FALSE)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  trainer  Trainer  @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  @@index([trainerId, activityId])
  @@map("announcements")
}

model Report {
  id                Int       @id @default(autoincrement())
  studentId         Int
  trainerId         Int
  activityId        Int
  title             String
  content           String
  performanceRating Float
  date              DateTime  @default(now())
  attachments       String?

  student           Student   @relation(fields: [studentId], references: [id])
  trainer           Trainer   @relation(fields: [trainerId], references: [id])
  activity          Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@index([studentId, trainerId])
  @@map("reports")
}



enum DAY {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum ROLE {
  ADMIN
  TRAINER
  STUDENT
}

enum ATTENDANT {
  PRESENT
  ABSENT
}

enum AnnouncementUrgency {
  TRUE
  FALSE
}
